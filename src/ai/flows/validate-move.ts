// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow for validating Go moves using AI.
 *
 * - `validateMove` -  A function that validates a Go move.
 * - `ValidateMoveInput` - The input type for the validateMove function.
 * - `ValidateMoveOutput` - The return type for the validateMove function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const ValidateMoveInputSchema = z.object({
  boardState: z.string().describe('The current state of the Go board, represented as a string.'),
  move: z.string().describe('The move to validate, represented as a string (e.g., A1, B2).'),
});
export type ValidateMoveInput = z.infer<typeof ValidateMoveInputSchema>;

const ValidateMoveOutputSchema = z.object({
  isValid: z.boolean().describe('Whether the move is valid according to Go rules.'),
  reason: z
    .string()
    .optional()
    .describe('If the move is invalid, the reason why.  Omit if the move is valid.'),
});
export type ValidateMoveOutput = z.infer<typeof ValidateMoveOutputSchema>;

export async function validateMove(input: ValidateMoveInput): Promise<ValidateMoveOutput> {
  return validateMoveFlow(input);
}

const validateMovePrompt = ai.definePrompt({
  name: 'validateMovePrompt',
  input: {schema: ValidateMoveInputSchema},
  output: {schema: ValidateMoveOutputSchema},
  prompt: `You are an expert Go player and game rule validator. Given the current board state and a proposed move, determine if the move is valid according to the rules of Go.\n\nBoard State:\n{{boardState}}\n\nProposed Move: {{move}}\n\nRespond with a JSON object that includes the field isValid and the field reason. Set isValid to true or false to indicate if the move is legal or illegal. If the move is illegal, then explain the specific reason for the move's illegality in the reason field. If the move is legal, then omit the reason field entirely.
`,
});

const validateMoveFlow = ai.defineFlow(
  {name: 'validateMoveFlow', inputSchema: ValidateMoveInputSchema, outputSchema: ValidateMoveOutputSchema},
  async input => {
    const {output} = await validateMovePrompt(input);
    return output!;
  }
);
